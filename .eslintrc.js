// eslint-disable-next-line no-undef
module.exports = {
  env: {
    es2021: true,
  },
  extends: 'eslint:recommended',
  plugins: ['jsdoc'],
  rules: {
    'array-bracket-newline': ['error', 'consistent'],
    'array-bracket-spacing': ['error', 'never'],
    'array-callback-return': 'error',
    'arrow-parens': ['error', 'as-needed'],
    'arrow-spacing': 'error',
    'block-scoped-var': 'error',
    'block-spacing': 'error',
    'brace-style': 'error',
    'comma-dangle': ['error', { arrays: 'always-multiline', objects: 'always-multiline', imports: 'always-multiline', functions: 'never' }],
    'comma-spacing': ['error', { before: false, after: true }],
    'comma-style': ['error', 'last'],
    'computed-property-spacing': 'error',
    'curly': ['error', 'multi-or-nest', 'consistent'],
    'dot-location': ['error', 'property'],
    'eol-last': 'error',
    'eqeqeq': 'error',
    'func-call-spacing': 'error',
    'func-name-matching': 'error',
    'func-style': ['error', 'declaration', { allowArrowFunctions: true }],
    'indent': ['error', 2, { ignoredNodes: ["CallExpression[callee.object.name=GObject][callee.property.name=registerClass] > ClassExpression:first-child"], MemberExpression: 'off' }],
    'jsdoc/check-alignment': 'error',
    'jsdoc/check-param-names': 'error',
    'jsdoc/check-tag-names': 'error',
    'jsdoc/check-types': 'error',
    'jsdoc/implements-on-classes': 'error',
    'jsdoc/require-jsdoc': 'error',
    'jsdoc/require-param': 'error',
    'jsdoc/require-param-description': 'error',
    'jsdoc/require-param-name': 'error',
    'jsdoc/require-param-type': 'error',
    'key-spacing': ['error', { beforeColon: false, afterColon: true }],
    'keyword-spacing': ['error', { before: true, after: true }],
    'linebreak-style': ['error', 'unix'],
    'lines-between-class-members': ['error', 'always', { exceptAfterSingleLine: true }],
    'max-nested-callbacks': 'error',
    'max-statements-per-line': 'error',
    'new-parens': 'error',
    'no-array-constructor': 'error',
    'no-await-in-loop': 'error',
    'no-caller': 'error',
    'no-constant-condition': ['error', { checkLoops: false }],
    'no-div-regex': 'error',
    'no-empty': ['error', { allowEmptyCatch: true }],
    'no-extra-bind': 'error',
    'no-extra-parens': ['error', 'all', { conditionalAssign: false, nestedBinaryExpressions: false, returnAssign: false }],
    'no-implicit-coercion': ['error', { allow: ['!!'] }],
    'no-invalid-this': 'error',
    'no-iterator': 'error',
    'no-label-var': 'error',
    'no-lonely-if': 'error',
    'no-loop-func': 'error',
    'no-nested-ternary': 'error',
    'no-new-object': 'error',
    'no-new-wrappers': 'error',
    'no-octal-escape': 'error',
    'no-proto': 'error',
    'no-prototype-builtins': 'off',
    'no-restricted-globals': ['error', 'window'],
  },
  settings: {
    jsdoc: {
      mode: 'typescript',
    },
  },
  globals: {
    ARGV: 'readonly',
    Debugger: 'readonly',
    GIRepositoryGType: 'readonly',
    globalThis: 'readonly',
    imports: 'readonly',
    Intl: 'readonly',
    log: 'readonly',
    logError: 'readonly',
    print: 'readonly',
    printerr: 'readonly',
    window: 'readonly',
    TextEncoder: 'readonly',
    TextDecoder: 'readonly',
    console: 'readonly',
    setTimeout: 'readonly',
    setInterval: 'readonly',
    clearTimeout: 'readonly',
    clearInterval: 'readonly',
  },
  parserOptions: {
    ecmaVersion: 2022,
    sourceType: "module",
  },
};
